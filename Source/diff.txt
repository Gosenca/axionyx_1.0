diff --git a/Source/DarkMatterParticleContainer.H b/Source/DarkMatterParticleContainer.H
index 22a91d7..0dca889 100644
--- a/Source/DarkMatterParticleContainer.H
+++ b/Source/DarkMatterParticleContainer.H
@@ -41,7 +41,7 @@ public:
     void InitFromBinaryMortonFile(const std::string& particle_directory, int nextra, int skip_factor);
     
 #ifdef FDM
-    void InitGaussianBeams (long num_particle_dm, int lev, int nlevs, const amrex::Real amp);
+    void InitGaussianBeams (long num_particle_dm, int lev, int nlevs, const amrex::Real amp, const amrex::Real alpha, const amrex::Real a);
 
     amrex::Real generateGaussianNoise(const amrex::Real &mean, const amrex::Real &stdDev);
 #endif
diff --git a/Source/DarkMatterParticleContainer.cpp b/Source/DarkMatterParticleContainer.cpp
index 285047f..d5639f4 100644
--- a/Source/DarkMatterParticleContainer.cpp
+++ b/Source/DarkMatterParticleContainer.cpp
@@ -786,10 +786,11 @@ DarkMatterParticleContainer::InitFromBinaryMortonFile(const std::string& particl
 }
 #ifdef FDM
 void
-DarkMatterParticleContainer::InitGaussianBeams (long num_particle_dm, int lev, int nlevs, const Real fact)
+DarkMatterParticleContainer::InitGaussianBeams (long num_particle_dm, int lev, int nlevs, const Real fact, const Real alpha, const Real a)
 {
 
   const int       MyProc      = ParallelDescriptor::MyProc();
+  const int       nprocs      = ParallelDescriptor::NProcs();
   const Geometry& geom        = m_gdb->Geom(lev);
 
   static Vector<int> calls;
@@ -799,17 +800,14 @@ DarkMatterParticleContainer::InitGaussianBeams (long num_particle_dm, int lev, i
   Vector<ParticleLevel>& particles = this->GetParticles();
 
   int  npart = num_particle_dm;
-  Real alpha = 1.8;//100.0;
+  int  npart_tot = nprocs*npart; //Each processor initializes num_particle_fdm beams
   Real q0[]  = {(geom.ProbHi(0)+geom.ProbLo(0))/2.0, (geom.ProbHi(1)+geom.ProbLo(1))/2.0, (geom.ProbHi(2)+geom.ProbLo(2))/2.0};
   Real q[]  = {(geom.ProbHi(0)+geom.ProbLo(0))/2.0, (geom.ProbHi(1)+geom.ProbLo(1))/2.0, (geom.ProbHi(2)+geom.ProbLo(2))/2.0};
   Real p0[] = {0.0,0.0,0.0};
   Real sigma = 0.5/sqrt(alpha);/*remember that we square amplitude alpha->2*alpha*/
-  // Real comoving_OmM = 0.3;
-  // Real comoving_h = 0.7;
-  // Real fact = 2.775e+11*comoving_h*comoving_h*comoving_OmM;//  1.0;
 
   //calculate dm particle mass
-  Real mass = 1.0/npart;
+  Real mass = 1.0/npart_tot;
   mass *= pow(2.0*alpha/M_PI,-1.5);
   mass *= fact;
 
@@ -843,9 +841,9 @@ DarkMatterParticleContainer::InitGaussianBeams (long num_particle_dm, int lev, i
       //set mass
       part.rdata( 0) =  mass;
       //set velocity
-      part.rdata( 1) = p0[0];
-      part.rdata( 2) = p0[1];
-      part.rdata( 3) = p0[2];
+      part.rdata( 1) = p0[0]/a;
+      part.rdata( 2) = p0[1]/a;
+      part.rdata( 3) = p0[2]/a;
       
       if (!this->Where(part,pld))
 	amrex::Abort("ParticleContainer<N>::InitGaussianBeams(): invalid particle");
diff --git a/Source/FDM/fdm_3d.f90 b/Source/FDM/fdm_3d.f90
index 5fdae59..477ac6d 100644
--- a/Source/FDM/fdm_3d.f90
+++ b/Source/FDM/fdm_3d.f90
@@ -42,9 +42,9 @@ subroutine deposit_fdm_particles(particles, np, state_real, &
                        if (kernelsize .le. (theta_fdm*theta_fdm/2.0)) then
                           
                           phi = amp*exp(-kernelsize)*exp(ii*(particles(n)%phase+ &
-                               particles(n)%vel(1)*a*(real(i1+i)-1.0-pos(1))*dx(1)+ &
-                               particles(n)%vel(2)*a*(real(j1+j)-1.0-pos(2))*dx(2)+ &
-                               particles(n)%vel(3)*a*(real(k1+k)-1.0-pos(3))*dx(3) )/hbaroverm)
+                               particles(n)%vel(1)*a*(real(i1+i)+1.0-pos(1))*dx(1)+ &
+                               particles(n)%vel(2)*a*(real(j1+j)+1.0-pos(2))*dx(2)+ &
+                               particles(n)%vel(3)*a*(real(k1+k)+1.0-pos(3))*dx(3) )/hbaroverm)
                           
                           state_real(i1+i,j1+j,k1+k,1) = state_real(i1+i,j1+j,k1+k,1) + real(real(phi))
                           state_imag(i1+i,j1+j,k1+k,1) = state_imag(i1+i,j1+j,k1+k,1) + real(aimag(phi))
@@ -106,9 +106,9 @@ subroutine deposit_fdm_particles_wkb(particles, np, state_real, &
                        if (kernelsize .le. (theta_fdm*theta_fdm/2.0)) then
                           
                           phi = amp*exp(-kernelsize)*exp(ii*(particles(n)%phase+ &
-                               particles(n)%vel(1)*a*(real(i1+i)-1.0-pos(1))*dx(1)+ &
-                               particles(n)%vel(2)*a*(real(j1+j)-1.0-pos(2))*dx(2)+ &
-                               particles(n)%vel(3)*a*(real(k1+k)-1.0-pos(3))*dx(3) )/hbaroverm)
+                               particles(n)%vel(1)*a*(real(i1+i)+1.0-pos(1))*dx(1)+ &
+                               particles(n)%vel(2)*a*(real(j1+j)+1.0-pos(2))*dx(2)+ &
+                               particles(n)%vel(3)*a*(real(k1+k)+1.0-pos(3))*dx(3) )/hbaroverm)
                           
                           state_real(i1+i,j1+j,k1+k,1) = state_real(i1+i,j1+j,k1+k,1) + real(real(phi))
                           state_imag(i1+i,j1+j,k1+k,1) = state_imag(i1+i,j1+j,k1+k,1) + real(aimag(phi))
diff --git a/Source/FDMParticleContainer.H b/Source/FDMParticleContainer.H
index 527afc5..3690efc 100644
--- a/Source/FDMParticleContainer.H
+++ b/Source/FDMParticleContainer.H
@@ -91,7 +91,8 @@ public:
  
     void InitVarCount (amrex::MultiFab& mf, long n_axpart, amrex::BoxArray &baWhereNot, int lev, int nlevs);
 
-    void InitGaussianBeams (long n_axpart, int lev, int nlevs, const amrex::Real hbaroverm, const amrex::Real sigma_ax, const amrex::Real gamma_ax, const amrex::Real amp);
+  void InitGaussianBeams (long n_axpart, int lev, int nlevs, const amrex::Real hbaroverm, const amrex::Real sigma_ax, 
+			  const amrex::Real gamma_ax, const amrex::Real amp, const amrex::Real alpha, const amrex::Real a);
 
     amrex::Real generateGaussianNoise(const amrex::Real &mean, const amrex::Real &stdDev);
 };
diff --git a/Source/FDMParticleContainer.cpp b/Source/FDMParticleContainer.cpp
index 7fb516f..82b9cce 100644
--- a/Source/FDMParticleContainer.cpp
+++ b/Source/FDMParticleContainer.cpp
@@ -283,11 +283,11 @@ FDMParticleContainer::moveKickDriftFDM (amrex::MultiFab&       phi,
            const Box& phi_box = (*phi_ptr)[pti].box();
 
            update_gaussian_beams(&Np, particles.data(),
-				 (*ac_ptr)[pti].dataPtr(),
-				 ac_box.loVect(), ac_box.hiVect(),
-				 (*phi_ptr)[pti].dataPtr(),
-				 phi_box.loVect(), phi_box.hiVect(),
-				 plo,dx,dt,a_old,a_half,&do_move);
+	   			 (*ac_ptr)[pti].dataPtr(),
+	   			 ac_box.loVect(), ac_box.hiVect(),
+	   			 (*phi_ptr)[pti].dataPtr(),
+	   			 phi_box.loVect(), phi_box.hiVect(),
+	   			 plo,dx,dt,a_old,a_half,&do_move);
         }
     }
 
@@ -361,11 +361,11 @@ FDMParticleContainer::moveKickFDM (amrex::MultiFab& phi,
         ac_ptr->FillBoundary();
     }
 
-    amrex::MultiFab* phi_ptr;
-    phi_ptr = new amrex::MultiFab(this->m_gdb->ParticleBoxArray(lev),
-				  this->m_gdb->ParticleDistributionMap(lev),
-				  phi.nComp(),grav_n_grow);
-    for (amrex::MFIter mfi(*phi_ptr); mfi.isValid(); ++mfi)
+    MultiFab* phi_ptr;
+    phi_ptr = new MultiFab(ParticleBoxArray(lev),
+			   ParticleDistributionMap(lev),
+			   phi.nComp(),grav_n_grow);
+    for (MFIter mfi(*phi_ptr); mfi.isValid(); ++mfi)
       phi_ptr->setVal(0.);
     phi_ptr->copy(phi,0,0,phi.nComp());
     phi_ptr->FillBoundary();
@@ -388,11 +388,11 @@ FDMParticleContainer::moveKickFDM (amrex::MultiFab& phi,
            const Box& phi_box = (*phi_ptr)[pti].box();
 
            update_gaussian_beams(&Np, particles.data(),
-				 (*ac_ptr)[pti].dataPtr(),
-				 ac_box.loVect(), ac_box.hiVect(),
-				 (*phi_ptr)[pti].dataPtr(),
-				 phi_box.loVect(), phi_box.hiVect(),
-				 plo,dx,dt,a_half,a_new,&do_move);
+	   			 (*ac_ptr)[pti].dataPtr(),
+	   			 ac_box.loVect(), ac_box.hiVect(),
+	   			 (*phi_ptr)[pti].dataPtr(),
+	   			 phi_box.loVect(), phi_box.hiVect(),
+	   			 plo,dx,dt,a_half,a_new,&do_move);
         }
     }
     
@@ -407,7 +407,7 @@ FDMParticleContainer::CreateGhostParticlesFDM (int level, int lev, int nGrow, Ao
   BL_ASSERT(ghosts.empty());
   BL_ASSERT(level < finestLevel());
 
-  if (level >= static_cast<int>(GetParticles().size()))
+  if (lev > static_cast<int>(GetParticles().size()))
     return;
 
   const BoxArray& fine = ParticleBoxArray(lev);
@@ -511,7 +511,7 @@ FDMParticleContainer::DepositFDMParticles(MultiFab& mf_real, MultiFab& mf_imag,
 #ifdef _OPENMP
       Box tile_box_real = pti.tilebox();
       tile_box_real.grow(ng_real);
-      local_real.resize(tile_box,1);
+      local_real.resize(tile_box_real,1);
       local_real = 0.0;
       data_ptr_real = local_real.dataPtr();
       lo_real = tile_box_real.loVect();
@@ -519,7 +519,7 @@ FDMParticleContainer::DepositFDMParticles(MultiFab& mf_real, MultiFab& mf_imag,
 
       Box tile_box_imag = pti.tilebox();
       tile_box_imag.grow(ng_imag);
-      local_imag.resize(tile_box,1);
+      local_imag.resize(tile_box_imag,1);
       local_imag = 0.0;
       data_ptr_imag = local_imag.dataPtr();
       lo_imag = tile_box_imag.loVect();
@@ -1373,9 +1373,10 @@ FDMParticleContainer::InitVarCount (MultiFab& mf, long num_particle_fdm, BoxArra
 }
 
 void
-FDMParticleContainer::InitGaussianBeams (long num_particle_fdm, int lev, int nlevs, const Real hbaroverm, const Real sigma_ax, const Real gamma_ax, const Real fact)
+FDMParticleContainer::InitGaussianBeams (long num_particle_fdm, int lev, int nlevs, const Real hbaroverm, const Real sigma_ax, const Real gamma_ax, const Real fact, const Real alpha, const Real a)
 {
   const int       MyProc      = ParallelDescriptor::MyProc();
+  const int       nprocs      = ParallelDescriptor::NProcs();
   const Geometry& geom        = m_gdb->Geom(lev);
   const Real*     dx          = geom.CellSize();
 
@@ -1385,17 +1386,13 @@ FDMParticleContainer::InitGaussianBeams (long num_particle_fdm, int lev, int nle
   if (calls[lev] > 1) return;
   Vector<ParticleLevel>& particles = this->GetParticles();
 
-  int  npart = num_particle_fdm;
-  Real alpha = 1.8;//100.0;
+  int  npart     = num_particle_fdm;
+  int  npart_tot = nprocs*npart; //Each processor initializes num_particle_fdm beams
   Real q[]  = {(geom.ProbHi(0)+geom.ProbLo(0))/2.0, (geom.ProbHi(1)+geom.ProbLo(1))/2.0, (geom.ProbHi(2)+geom.ProbLo(2))/2.0};
   Real p[]  = {0.0,0.0,0.0};
   Real q0[]  = {(geom.ProbHi(0)+geom.ProbLo(0))/2.0, (geom.ProbHi(1)+geom.ProbLo(1))/2.0, (geom.ProbHi(2)+geom.ProbLo(2))/2.0};
   Real p0[] = {0.0,0.0,0.0};
   Real r, theta, phi, Amp;
-  Real sigma = 0.5/sqrt(alpha);
-  // Real comoving_OmM = 0.3;
-  // Real comoving_h = 0.7;
-  // Real fact = 2.775e+11*comoving_h*comoving_h*comoving_OmM;//  1.0;
 
   particles.reserve(15);  // So we don't ever have to do any copying on a resize.
   particles.resize(nlevs);
@@ -1428,7 +1425,7 @@ FDMParticleContainer::InitGaussianBeams (long num_particle_fdm, int lev, int nle
     p[2] = r*sin(theta)*2.0*sqrt(alpha+gamma_ax)*hbaroverm + p0[2];
 	
     phi  = ( (p[0]*alpha+p0[0]*gamma_ax)*(q[0]-q0[0]) + (p[1]*alpha+p0[1]*gamma_ax)*(q[1]-q0[1]) + (p[2]*alpha+p0[2]*gamma_ax)*(q[2]-q0[2]) )/(alpha+gamma_ax);
-    Amp  = 2.0*(alpha+gamma_ax)/sqrt(alpha*gamma_ax)/M_PI/sqrt(2*gamma_ax/M_PI)/pow(npart,2.0/3.0);
+    Amp  = 2.0*(alpha+gamma_ax)/sqrt(alpha*gamma_ax)/M_PI/sqrt(2*gamma_ax/M_PI)/pow(npart_tot,2.0/3.0);
     Amp /= sqrt(2.0*alpha/M_PI);
     Amp *= pow(fact,1.0/3.0);
 
@@ -1437,28 +1434,18 @@ FDMParticleContainer::InitGaussianBeams (long num_particle_fdm, int lev, int nle
       part.id()      = ParticleType::NextID();
       part.cpu()     = MyProc;
 
-      // set position
+      //set position
       for (int n = 0; n < BL_SPACEDIM; n++)
 	part.pos( n) = q[n];
-      // 	part.pos( n) = 0.5;
-      // if(index==0)
-      // 	part.pos( 0) = 0.32;
-      // set mass                                                                                                                                                                
-      part.rdata( 0) =  1.0/(npart * dx[0] * dx[1] * dx[2]);
-      // set velocity
-      // part.rdata( 1) = 0.0;
-      // part.rdata( 2) = 0.0;
-      // part.rdata( 3) = 0.0;
-      part.rdata( 1) = p[0];
-      part.rdata( 2) = p[1];
-      part.rdata( 3) = p[2];
+      //set mass                                                                                                                                                                
+      part.rdata( 0) =  1.0/(npart_tot * dx[0] * dx[1] * dx[2]);
+      //set velocity
+      part.rdata( 1) = p[0]/a;
+      part.rdata( 2) = p[1]/a;
+      part.rdata( 3) = p[2]/a;
       //set phase
       part.rdata( 4) = phi;
       //set amplitude
-      // if(index==0)
-      // part.rdata( 5) = 0.0001*pow(2.0*gamma_ax/M_PI,0.75);//pow(2.0*gamma_ax*Amp,1.5);
-      // else
-      // part.rdata( 5) = pow(2.0*gamma_ax/M_PI,0.75);
       part.rdata( 5) = pow(2.0*gamma_ax*Amp,1.5);
       part.rdata( 6) = 0.0;
       //set width
diff --git a/Source/FDMwkbParticleContainer.H b/Source/FDMwkbParticleContainer.H
index 3da853e..07b96e0 100644
--- a/Source/FDMwkbParticleContainer.H
+++ b/Source/FDMwkbParticleContainer.H
@@ -73,7 +73,8 @@ public:
  
     void InitVarCount (amrex::MultiFab& mf, long n_axpart, amrex::BoxArray &baWhereNot, int lev, int nlevs);
 
-    void InitGaussianBeams (long n_axpart, int lev, int nlevs, const amrex::Real hbaroverm, const amrex::Real sigma_ax, const amrex::Real gamma_ax, const amrex::Real amp);
+  void InitGaussianBeams (long n_axpart, int lev, int nlevs, const amrex::Real hbaroverm, const amrex::Real sigma_ax, 
+			  const amrex::Real gamma_ax, const amrex::Real amp, const amrex::Real alpha, const amrex::Real a);
 
     amrex::Real generateGaussianNoise(const amrex::Real &mean, const amrex::Real &stdDev);
 };
diff --git a/Source/FDMwkbParticleContainer.cpp b/Source/FDMwkbParticleContainer.cpp
index 418adb3..92f0a07 100644
--- a/Source/FDMwkbParticleContainer.cpp
+++ b/Source/FDMwkbParticleContainer.cpp
@@ -123,9 +123,9 @@ FDMwkbParticleContainer::moveKickDrift (amrex::MultiFab&       acceleration,
            const Box& ac_box = (*ac_ptr)[pti].box();
 
            update_fdm_particles_wkb(&Np, particles.data(),
-				    (*ac_ptr)[pti].dataPtr(),
-				    ac_box.loVect(), ac_box.hiVect(),
-				    plo,dx,dt,a_old,a_half,&do_move);
+	   			    (*ac_ptr)[pti].dataPtr(),
+	   			    ac_box.loVect(), ac_box.hiVect(),
+	   			    plo,dx,dt,a_old,a_half,&do_move);
         }
     }
 
@@ -213,9 +213,9 @@ FDMwkbParticleContainer::moveKick (MultiFab&       acceleration,
            const Box& ac_box = (*ac_ptr)[pti].box();
 
            update_fdm_particles_wkb(&Np, particles.data(),
-				    (*ac_ptr)[pti].dataPtr(),
-				    ac_box.loVect(), ac_box.hiVect(),
-				    plo,dx,dt,a_half,a_new,&do_move);
+	   			    (*ac_ptr)[pti].dataPtr(),
+	   			    ac_box.loVect(), ac_box.hiVect(),
+	   			    plo,dx,dt,a_half,a_new,&do_move);
         }
     }
     
@@ -283,11 +283,11 @@ FDMwkbParticleContainer::moveKickDriftFDM (amrex::MultiFab&       phi,
            const Box& phi_box = (*phi_ptr)[pti].box();
 
            update_gaussian_beams_wkb(&Np, particles.data(),
-				     (*ac_ptr)[pti].dataPtr(),
-				     ac_box.loVect(), ac_box.hiVect(),
-				     (*phi_ptr)[pti].dataPtr(),
-				     phi_box.loVect(), phi_box.hiVect(),
-				     plo,dx,dt,a_old,a_half,&do_move);
+	   			     (*ac_ptr)[pti].dataPtr(),
+	   			     ac_box.loVect(), ac_box.hiVect(),
+	   			     (*phi_ptr)[pti].dataPtr(),
+	   			     phi_box.loVect(), phi_box.hiVect(),
+	   			     plo,dx,dt,a_old,a_half,&do_move);
         }
     }
 
@@ -388,11 +388,11 @@ FDMwkbParticleContainer::moveKickFDM (amrex::MultiFab& phi,
            const Box& phi_box = (*phi_ptr)[pti].box();
 
            update_gaussian_beams_wkb(&Np, particles.data(),
-				     (*ac_ptr)[pti].dataPtr(),
-				     ac_box.loVect(), ac_box.hiVect(),
-				     (*phi_ptr)[pti].dataPtr(),
-				     phi_box.loVect(), phi_box.hiVect(),
-				     plo,dx,dt,a_half,a_new,&do_move);
+	   			     (*ac_ptr)[pti].dataPtr(),
+	   			     ac_box.loVect(), ac_box.hiVect(),
+	   			     (*phi_ptr)[pti].dataPtr(),
+	   			     phi_box.loVect(), phi_box.hiVect(),
+	   			     plo,dx,dt,a_half,a_new,&do_move);
         }
     }
     
@@ -511,7 +511,7 @@ FDMwkbParticleContainer::DepositFDMParticles(MultiFab& mf_real, MultiFab& mf_ima
 #ifdef _OPENMP
       Box tile_box_real = pti.tilebox();
       tile_box_real.grow(ng_real);
-      local_real.resize(tile_box,1);
+      local_real.resize(tile_box_real,1);
       local_real = 0.0;
       data_ptr_real = local_real.dataPtr();
       lo_real = tile_box_real.loVect();
@@ -519,7 +519,7 @@ FDMwkbParticleContainer::DepositFDMParticles(MultiFab& mf_real, MultiFab& mf_ima
 
       Box tile_box_imag = pti.tilebox();
       tile_box_imag.grow(ng_imag);
-      local_imag.resize(tile_box,1);
+      local_imag.resize(tile_box_imag,1);
       local_imag = 0.0;
       data_ptr_imag = local_imag.dataPtr();
       lo_imag = tile_box_imag.loVect();
@@ -1373,9 +1373,10 @@ FDMwkbParticleContainer::InitVarCount (MultiFab& mf, long num_particle_fdm, BoxA
 }
 
 void
-FDMwkbParticleContainer::InitGaussianBeams (long num_particle_fdm, int lev, int nlevs, const Real hbaroverm, const Real sigma_ax, const Real gamma_ax, const Real fact)
+FDMwkbParticleContainer::InitGaussianBeams (long num_particle_fdm, int lev, int nlevs, const Real hbaroverm, const Real sigma_ax, const Real gamma_ax, const Real fact, const Real alpha, const Real a)
 {
   const int       MyProc      = ParallelDescriptor::MyProc();
+  const int       nprocs      = ParallelDescriptor::NProcs();
   const Geometry& geom        = m_gdb->Geom(lev);
   const Real*     dx          = geom.CellSize();
 
@@ -1386,16 +1387,13 @@ FDMwkbParticleContainer::InitGaussianBeams (long num_particle_fdm, int lev, int
   Vector<ParticleLevel>& particles = this->GetParticles();
 
   int  npart = num_particle_fdm;
-  Real alpha = 1.8;//100.0;
+  int  npart_tot = nprocs*npart; //Each processor initializes num_particle_fdm beams
   Real q[]  = {(geom.ProbHi(0)+geom.ProbLo(0))/2.0, (geom.ProbHi(1)+geom.ProbLo(1))/2.0, (geom.ProbHi(2)+geom.ProbLo(2))/2.0};
   Real p[]  = {0.0,0.0,0.0};
   Real q0[]  = {(geom.ProbHi(0)+geom.ProbLo(0))/2.0, (geom.ProbHi(1)+geom.ProbLo(1))/2.0, (geom.ProbHi(2)+geom.ProbLo(2))/2.0};
   Real p0[] = {0.0,0.0,0.0};
   Real phi, Amp;
   Real sigma = 0.5/sqrt(alpha);
-  // Real comoving_OmM = 0.3;
-  // Real comoving_h = 0.7;
-  // Real fact = 2.775e+11*comoving_h*comoving_h*comoving_OmM;//1.0;
 
   particles.reserve(15);  // So we don't ever have to do any copying on a resize.
   particles.resize(nlevs);
@@ -1419,35 +1417,25 @@ FDMwkbParticleContainer::InitGaussianBeams (long num_particle_fdm, int lev, int
     p[0] = p0[0];
     p[1] = p0[1];
     p[2] = p0[2];
-    Amp  = pow(fact/npart/npart,1.0/3.0)/M_PI/(alpha/M_PI);
+    Amp  = pow(fact/npart_tot/npart_tot,1.0/3.0)/M_PI/(alpha/M_PI);
     
     if(q[0]>geom.ProbLo(0) && q[0]<geom.ProbHi(0) && q[1]>geom.ProbLo(1) && q[1]<geom.ProbHi(1) && q[2]>geom.ProbLo(2) && q[2]<geom.ProbHi(2)){
 
       part.id()      = ParticleType::NextID();
       part.cpu()     = MyProc;
 
-      // set position
+      //set position
       for (int n = 0; n < BL_SPACEDIM; n++)
 	part.pos( n) = q[n];
-      // 	part.pos( n) = 0.5;
-      // if(index==0)
-      // 	part.pos( 0) = 0.32;
-      // set mass                                                                                                                                                                
-      part.rdata( 0) =  1.0/(npart * dx[0] * dx[1] * dx[2]);
-      // set velocity
-      // part.rdata( 1) = 0.0;
-      // part.rdata( 2) = 0.0;
-      // part.rdata( 3) = 0.0;
-      part.rdata( 1) = p[0];
-      part.rdata( 2) = p[1];
-      part.rdata( 3) = p[2];
+      //set mass                                                                                                                                                                
+      part.rdata( 0) =  1.0/(npart_tot * dx[0] * dx[1] * dx[2]);
+      //set velocity
+      part.rdata( 1) = p[0]/a;
+      part.rdata( 2) = p[1]/a;
+      part.rdata( 3) = p[2]/a;
       //set phase
       part.rdata( 4) = phi;
       //set amplitude
-      // if(index==0)
-      // part.rdata( 5) = 0.0001*pow(2.0*gamma_ax/M_PI,0.75);//pow(2.0*gamma_ax*Amp,1.5);
-      // else
-      // part.rdata( 5) = pow(2.0*gamma_ax/M_PI,0.75);
       part.rdata( 5) = pow(gamma_ax*Amp,1.5);
       part.rdata( 6) = 0.0;
       //set width
diff --git a/Source/Gravity/Gravity.cpp b/Source/Gravity/Gravity.cpp
index 80fea78..d8b011e 100644
--- a/Source/Gravity/Gravity.cpp
+++ b/Source/Gravity/Gravity.cpp
@@ -1018,7 +1018,7 @@ Gravity::actual_multilevel_solve (int                       level,
         const Real  dvol = grids[0].d_numPts() * dx[0] * dx[1] * dx[2];
 
         sum /= dvol;
-        std::cout << "subtracing " << sum << std::endl;
+	amrex::Print() << "subtracing " << sum << std::endl;
         for (int lev = 0; lev < num_levels; lev++)
         {
           (*phi_p[lev]).plus(-sum, 0, 1, 0);
@@ -1027,7 +1027,7 @@ Gravity::actual_multilevel_solve (int                       level,
         sum = 0.0;
         for (int lev = 0; lev < num_levels; lev++)
                        sum += compute_multilevel_average(level+lev, phi_p[lev], finest_level);
-        std::cout << "average is " << sum/dvol << " after subtraction." << std::endl;
+	amrex::Print() << "average is " << sum/dvol << " after subtraction." << std::endl;
 
       }
 }
diff --git a/Source/Nyx.H b/Source/Nyx.H
index 4a8a8c0..43eacd4 100644
--- a/Source/Nyx.H
+++ b/Source/Nyx.H
@@ -623,6 +623,7 @@ public:
     static amrex::Real theta_fdm;
     static amrex::Real sigma_fdm;
     static amrex::Real gamma_fdm;
+    static amrex::Real alpha_fdm;
     static int wkb_approx;
     static amrex::Real beam_cfl;
 #endif
diff --git a/Source/Nyx.cpp b/Source/Nyx.cpp
index 8633118..63fdd65 100644
--- a/Source/Nyx.cpp
+++ b/Source/Nyx.cpp
@@ -120,6 +120,7 @@ Vector<int> Nyx::levelmethod;
 Real Nyx::theta_fdm = 1.0;
 Real Nyx::sigma_fdm = 1.0;
 Real Nyx::gamma_fdm = 1.0;
+Real Nyx::alpha_fdm = 1.0;
 int  Nyx::wkb_approx = 1;
 Real Nyx::beam_cfl = 0.2;
 #endif
@@ -296,6 +297,7 @@ Nyx::read_params ()
     fort_set_sigma(sigma_fdm);
     gamma_fdm = 0.5/sigma_fdm/sigma_fdm;
     fort_set_gamma(gamma_fdm);
+    pp_nyx.query("alpha_fdm", alpha_fdm);
     pp_nyx.query("wkb_approx", wkb_approx);
     pp_nyx.query("beam_cfl", beam_cfl);
     if (pp_nyx.contains("levelmethod"))
diff --git a/Source/NyxParticles.cpp b/Source/NyxParticles.cpp
index 0ad4bbd..f47ea1c 100644
--- a/Source/NyxParticles.cpp
+++ b/Source/NyxParticles.cpp
@@ -428,6 +428,9 @@ Nyx::init_particles ()
     if (level > 0)
         return;
 
+#ifdef FDM
+    const Real a = get_comoving_a(state[State_Type].curTime());
+#endif
     //
     // Need to initialize particles before defining gravity.
     //
@@ -595,7 +598,7 @@ Nyx::init_particles ()
 		  amrex::Error("FDM computations are not supported for sph particles.");
 	      }
 	    if(num_particle_dm > 0)
-	      DMPC->InitGaussianBeams(num_particle_dm, level, parent->initialBaLevels()+1, meandens);
+	      DMPC->InitGaussianBeams(num_particle_dm, level, parent->initialBaLevels()+1, meandens, alpha_fdm, a);
 	    else
 	      amrex::Error("\nNeed num_particle_dm > 0 for DM InitGaussianBeams!\n\n");
 	  }
@@ -716,6 +719,7 @@ Nyx::init_particles ()
 #endif
 #ifdef FDM
     if(partlevel){
+    // if(false){
     if(wkb_approx)
     {
       BL_ASSERT (FDMwkbPC == 0);
@@ -844,7 +848,7 @@ Nyx::init_particles ()
 	  if (!do_dm_particles)
 	    amrex::Print() << "\n DM particles are needed for the construction of the gravitational potential!!\n\n";
 	  if(num_particle_fdm > 0)
-	    FDMwkbPC->InitGaussianBeams(num_particle_fdm, level, parent->initialBaLevels()+1, hbaroverm, sigma_fdm, gamma_fdm, meandens);
+	    FDMwkbPC->InitGaussianBeams(num_particle_fdm, level, parent->initialBaLevels()+1, hbaroverm, sigma_fdm, gamma_fdm, meandens, alpha_fdm, a);
 	  else
 	    amrex::Error("\nNeed num_particle_fdm > 0 for InitGaussianBeams!\n\n");
 
@@ -1032,7 +1036,7 @@ Nyx::init_particles ()
 	  if (!do_dm_particles)
 	    amrex::Print() << "\n DM particles are needed for the construction of the gravitational potential!!\n\n";
 	  if(num_particle_fdm > 0)
-	    FDMPC->InitGaussianBeams(num_particle_fdm, level, parent->initialBaLevels()+1, hbaroverm, sigma_fdm, gamma_fdm, meandens);
+	    FDMPC->InitGaussianBeams(num_particle_fdm, level, parent->initialBaLevels()+1, hbaroverm, sigma_fdm, gamma_fdm, meandens, alpha_fdm, a);
 	  else
 	    amrex::Error("\nNeed num_particle_fdm > 0 for InitGaussianBeams!\n\n");
 
@@ -1777,27 +1781,39 @@ Nyx::setup_ghost_particles(int ngrow)
     }
 #endif
 #ifdef FDM
+    // if(Nyx::theFDMPC() != 0)
+    // {
+    //     FDMParticleContainer::AoS ghosts;
+    //     Nyx::theFDMPC()->CreateGhostParticles(level, ngrow, ghosts);
+    //     Nyx::theGhostFDMPC()->AddParticlesAtLevel(ghosts, level+1, ngrow);
+    // }
+    // if(Nyx::theFDMwkbPC() != 0)
+    // {
+    //     FDMwkbParticleContainer::AoS ghosts;
+    //     Nyx::theFDMwkbPC()->CreateGhostParticles(level, ngrow, ghosts);
+    //     Nyx::theGhostFDMwkbPC()->AddParticlesAtLevel(ghosts, level+1, ngrow);
+    // }
     if(Nyx::theFDMPC() != 0)
       {
-	FDMParticleContainer::AoS ghosts;
-	for (int lev = level+1; lev <= parent->finestLevel(); lev++){
-	  // if(levelmethod[lev]==GBlevel){
-	    int ng = parent->nCycle(level)+ceil(sigma_fdm*theta_fdm/parent->Geom(lev).CellSize()[0]);
-	    Nyx::theFDMPC()->CreateGhostParticlesFDM(level, lev, ng, ghosts);
-	    Nyx::theGhostFDMPC()->AddParticlesAtLevel(ghosts, lev, ng);
-	  // }
-	}
+    	FDMParticleContainer::AoS ghosts;
+    	for (int lev = level+1; lev <= parent->finestLevel(); lev++){
+    	  if(levelmethod[lev]==GBlevel){
+    	    int ng = parent->nCycle(level)+ceil(sigma_fdm*theta_fdm/parent->Geom(lev).CellSize()[0]);
+    	    Nyx::theFDMPC()->CreateGhostParticlesFDM(level, lev, ng, ghosts);
+    	    Nyx::theGhostFDMPC()->AddParticlesAtLevel(ghosts, lev, ng);
+    	  }
+    	}
       }
     if(Nyx::theFDMwkbPC() != 0)
       {
-	FDMwkbParticleContainer::AoS ghosts;
-	for (int lev = level+1; lev <= parent->finestLevel(); lev++){
-	  // if(levelmethod[lev]==GBlevel){
-	    int ng = parent->nCycle(level)+ceil(sigma_fdm*theta_fdm/parent->Geom(lev).CellSize()[0]);
-	    Nyx::theFDMwkbPC()->CreateGhostParticlesFDM(level, lev, ng, ghosts);
-	    Nyx::theGhostFDMwkbPC()->AddParticlesAtLevel(ghosts, lev, ng);
-	  // }
-	}
+    	FDMwkbParticleContainer::AoS ghosts;
+    	for (int lev = level+1; lev <= parent->finestLevel(); lev++){
+    	  if(levelmethod[lev]==GBlevel){
+    	    int ng = parent->nCycle(level)+ceil(sigma_fdm*theta_fdm/parent->Geom(lev).CellSize()[0]);
+    	    Nyx::theFDMwkbPC()->CreateGhostParticlesFDM(level, lev, ng, ghosts);
+    	    Nyx::theGhostFDMwkbPC()->AddParticlesAtLevel(ghosts, lev, ng);
+    	  }
+    	}
       }
 #endif
 
diff --git a/Source/Src_3d/update_particles_3d.f90 b/Source/Src_3d/update_particles_3d.f90
index 7b67f68..c5450ee 100644
--- a/Source/Src_3d/update_particles_3d.f90
+++ b/Source/Src_3d/update_particles_3d.f90
@@ -653,7 +653,7 @@
         particles(n)%amp(1) = real(real(Cpq))
         particles(n)%amp(2) = real(aimag(Cpq))
 
-        print *, hbaroverm, ii, gamma_fdm, particles(n)%amp(1), particles(n)%amp(2)
+        ! print *, hbaroverm, ii, gamma_fdm, particles(n)%amp(1), particles(n)%amp(2)
 
        end if
 
diff --git a/Source/Tagging/Nyx_error.cpp b/Source/Tagging/Nyx_error.cpp
index 67d1efc..11ed458 100644
--- a/Source/Tagging/Nyx_error.cpp
+++ b/Source/Tagging/Nyx_error.cpp
@@ -50,8 +50,8 @@ Nyx::error_setup()
     //err_list.add("entropy", 1, ErrorRec::Standard,
     //             BL_FORT_PROC_CALL(TAG_ENTERROR, tag_enterror));
 
-    err_list.add("total_density",1,ErrorRec::UseAverage,
-                 BL_FORT_PROC_CALL(TAG_OVERDENSITY, tag_overdensity));
+    // err_list.add("total_density",1,ErrorRec::UseAverage,
+    //              BL_FORT_PROC_CALL(TAG_OVERDENSITY, tag_overdensity));
 
 }
 
diff --git a/Source/advance_particles.cpp b/Source/advance_particles.cpp
index 635a12d..bdaf569 100644
--- a/Source/advance_particles.cpp
+++ b/Source/advance_particles.cpp
@@ -196,7 +196,8 @@ Nyx::advance_particles_only (Real time,
         // Solve for phi
         // If a single-level calculation we can still use the previous phi as a guess.
         // TODO: Check this.
-        int use_previous_phi_as_guess = 1;
+        // int use_previous_phi_as_guess = 1;
+        int use_previous_phi_as_guess = 0;
         gravity->multilevel_solve_for_old_phi(level, finest_level,
                                               use_previous_phi_as_guess);
     }
